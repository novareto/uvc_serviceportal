import hydra
import logging
import bjoern
import fanstatic
import pathlib
import rutter.urlmap
import horseman.response
import cromlech.session
import cromlech.sessions.file

from adhoc.db import Database, User, Message
from adhoc.emailer import SecureMailer
from adhoc.storage import Storage
from adhoc.request import Request
from adhoc.auth import Auth, AuthNode
from adhoc.web import Application


logger = logging.getLogger(__name__)


def setup_app(config, logger):
    # setup_logbook(config.logging).push_application()
    storage = Storage(**dict(config.storage))

    # Preparing the overhead
    db = Database(**dict(config.db))
    request_factory = Request.factory(db, session_key="sess")

    # Add test users
    try:
        db.session.drop_collection(User)
        db.session.drop_collection(Message)
    except:
        pass
    db.session.create_collection(User)
    db.session.create_collection(Message)
    user = User(
        _key='0101010001', password="password")
    db.session.add(user)
    message = Message(
        title="Some message", text="Beware beware !", userid='0101010001')
    db.session.add(message)

    # Web frontend
    emailer = SecureMailer(**dict(config.smtp))
    frontend = Application(
        emailer, storage, logger, request_factory, config)

    # Auth middleware
    auth = Auth(db, "sess", login_path="/auth/login")

    # Creating the main router
    application = rutter.urlmap.URLMap(
        not_found_app=horseman.response.Response.create(404)
    )
    application["/"] = auth(frontend)
    application["/auth"] = AuthNode(auth, logger, request_factory)
    return application


def setup_middleware(config):
    # Session middleware
    current = pathlib.Path(__file__).parent
    folder = current / "sessions"
    handler = cromlech.sessions.file.FileStore(folder, 300)
    manager = cromlech.session.SignedCookieManager("secret", handler, cookie="my_sid")
    return cromlech.session.WSGISessionManager(manager, environ_key="sess")


@hydra.main(config_path="config.yaml")
def run(config):
    # print(config.pretty())
    application = setup_app(config, logger)
    session_middleware = setup_middleware(config)
    # Serving the app
    server = config.server
    host, port = server.host, server.port
    logger.info(f"Server Started on http://{host}:{port}")
    bjoern.run(
        fanstatic.Fanstatic(session_middleware(application)),
        host, int(port), reuse_port=True,
    )


if __name__ == "__main__":
    run()
